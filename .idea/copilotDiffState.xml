<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Patient Management System â€“ Microservices Architecture&#10;&#10;A production-ready, cloud-native Patient Management System built with Java, Spring Boot, Docker, and AWS. This project demonstrates a robust microservices architecture with secure authentication, real-time and event-driven communication, and infrastructure as code for seamless deployment.&#10;&#10;---&#10;&#10;## Table of Contents&#10;- [Architecture Overview](#architecture-overview)&#10;- [Tech Stack](#tech-stack)&#10;- [Microservices](#microservices)&#10;- [API Gateway &amp; Load Balancing](#api-gateway--load-balancing)&#10;- [Event-Driven &amp; Real-Time Communication](#event-driven--real-time-communication)&#10;- [Authentication &amp; Security](#authentication--security)&#10;- [Local Development &amp; Setup](#local-development--setup)&#10;- [Testing](#testing)&#10;- [Deployment (AWS &amp; LocalStack)](#deployment-aws--localstack)&#10;- [Sample API Usage](#sample-api-usage)&#10;- [Contributing](#contributing)&#10;- [License](#license)&#10;&#10;---&#10;&#10;## Architecture Overview&#10;&#10;- **Microservices**: Each domain (auth, patient, billing, analytics) is a separate Spring Boot service, containerized with Docker.&#10;- **API Gateway**: Central entry point for all client requests, with load balancing and routing.&#10;- **Databases**: Each service uses its own Postgres database for data isolation and scalability.&#10;- **Event-Driven**: Kafka is used for asynchronous communication and event propagation between services.&#10;- **Real-Time**: REST and gRPC are used for synchronous and high-performance inter-service communication.&#10;- **Security**: JWT Bearer tokens secure APIs and user authentication.&#10;- **Infrastructure as Code**: AWS resources are provisioned using CDK and tested locally with LocalStack.&#10;&#10;---&#10;&#10;## Tech Stack&#10;- **Languages**: Java 17+&#10;- **Frameworks**: Spring Boot, Spring Security, Spring Data JPA&#10;- **Databases**: PostgreSQL&#10;- **Messaging**: Apache Kafka&#10;- **API**: REST (Spring MVC), gRPC (protobuf)&#10;- **Containerization**: Docker&#10;- **API Gateway**: Spring Cloud Gateway&#10;- **Testing**: JUnit, Integration Tests&#10;- **Infrastructure**: AWS CDK, LocalStack&#10;&#10;---&#10;&#10;## Microservices&#10;&#10;- **auth-service**: Handles user registration, login, JWT issuance, and validation.&#10;- **patient-service**: Manages patient records (CRUD), emits events on changes.&#10;- **billing-service**: Manages billing accounts, listens to patient events, and processes billing.&#10;- **analytics-service**: Consumes events for analytics and reporting.&#10;- **api-gateway**: Routes and secures all external API traffic.&#10;&#10;Each service has its own Dockerfile and can be built and run independently.&#10;&#10;---&#10;&#10;## API Gateway &amp; Load Balancing&#10;- All client requests go through the API Gateway.&#10;- The gateway handles routing, load balancing, and authentication (JWT validation).&#10;- Configuration is in `api-gateway/src/main/resources/application.yml`.&#10;&#10;---&#10;&#10;## Event-Driven &amp; Real-Time Communication&#10;- **Kafka**: Used for publishing and subscribing to domain events (e.g., patient created/updated).&#10;- **gRPC**: Used for high-performance, real-time service-to-service calls (see proto files in each service).&#10;- **REST**: Standard synchronous communication for most APIs.&#10;&#10;---&#10;&#10;## Authentication &amp; Security&#10;- **JWT Bearer Tokens**: Secure all APIs. Obtain a token via the auth-service and include it in the `Authorization: Bearer &lt;token&gt;` header.&#10;- **Spring Security**: Used in all services to enforce authentication and authorization.&#10;&#10;---&#10;&#10;## Local Development &amp; Setup&#10;&#10;### Prerequisites&#10;- Java 17+&#10;- Docker &amp; Docker Compose&#10;- Maven&#10;&#10;### Build &amp; Run All Services&#10;```sh&#10;# Build all services&#10;mvn clean package -DskipTests&#10;&#10;# Build Docker images for each service&#10;cd auth-service &amp;&amp; docker build -t auth-service .&#10;cd ../patient-service &amp;&amp; docker build -t patient-service .&#10;cd ../billing-service &amp;&amp; docker build -t billing-service .&#10;cd ../analytics-service &amp;&amp; docker build -t analytics-service .&#10;cd ../api-gateway &amp;&amp; docker build -t api-gateway .&#10;&#10;# (Optional) Use docker-compose.yml if provided&#10;# docker-compose up --build&#10;```&#10;&#10;### Running Infrastructure Locally&#10;- Use [LocalStack](https://github.com/localstack/localstack) to emulate AWS services locally.&#10;- Deploy infrastructure with:&#10;```sh&#10;cd infrastructure&#10;./localstack-deploy.sh&#10;```&#10;&#10;---&#10;&#10;## Testing&#10;- **Unit &amp; Integration Tests**: Run with Maven:&#10;```sh&#10;mvn test&#10;```&#10;- **Integration tests** are in the `integration-tests/` module.&#10;- **Sample HTTP/gRPC requests**: See `api-requests/` and `grpc-requests/` folders for ready-to-use request samples.&#10;&#10;---&#10;&#10;## Deployment (AWS &amp; LocalStack)&#10;- Infrastructure as code is managed in the `infrastructure/` directory using AWS CDK.&#10;- To deploy to AWS, configure your AWS credentials and run the CDK deployment scripts.&#10;- For local testing, use LocalStack as described above.&#10;&#10;---&#10;&#10;## Sample API Usage&#10;&#10;### Authenticate &amp; Get JWT&#10;```http&#10;POST /auth/login HTTP/1.1&#10;Content-Type: application/json&#10;{&#10;  &quot;username&quot;: &quot;user&quot;,&#10;  &quot;password&quot;: &quot;pass&quot;&#10;}&#10;```&#10;&#10;### Create Patient (with JWT)&#10;```http&#10;POST /patients HTTP/1.1&#10;Authorization: Bearer &lt;token&gt;&#10;Content-Type: application/json&#10;{&#10;  &quot;name&quot;: &quot;John Doe&quot;,&#10;  &quot;dob&quot;: &quot;1990-01-01&quot;,&#10;  ...&#10;}&#10;```&#10;&#10;### gRPC Example&#10;- See proto files in each service's `src/main/proto/` directory.&#10;- Use the provided `.proto` files and `grpc-requests/` samples.&#10;&#10;---&#10;&#10;## Contributing&#10;Pull requests are welcome! For major changes, please open an issue first to discuss what you would like to change.&#10;&#10;---&#10;&#10;## License&#10;This project is licensed under the MIT License.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>